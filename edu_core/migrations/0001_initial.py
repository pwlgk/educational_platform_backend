# Generated by Django 5.1.7 on 2025-05-15 16:19

import django.db.models.deletion
import django.utils.timezone
import edu_core.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Например, 2024-2025', max_length=100, unique=True, verbose_name='название учебного года')),
                ('start_date', models.DateField(verbose_name='дата начала')),
                ('end_date', models.DateField(verbose_name='дата окончания')),
                ('is_current', models.BooleanField(default=False, help_text='Только один учебный год может быть помечен как текущий', verbose_name='текущий год')),
            ],
            options={
                'verbose_name': 'учебный год',
                'verbose_name_plural': 'учебные годы',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=50, unique=True, verbose_name='номер/название')),
                ('capacity', models.PositiveIntegerField(default=0, verbose_name='вместимость')),
                ('type', models.CharField(choices=[('LECTURE', 'Лекционная'), ('PRACTICE', 'Практическая'), ('LAB', 'Лаборатория'), ('COMPUTER', 'Компьютерный класс'), ('SPORTS', 'Спортивный зал'), ('ART', 'Творческая мастерская'), ('LIBRARY', 'Библиотека'), ('MEETING', 'Переговорная/Зал собраний'), ('OTHER', 'Другое')], default='OTHER', max_length=20, verbose_name='тип аудитории')),
                ('equipment', models.TextField(blank=True, verbose_name='оборудование и примечания')),
            ],
            options={
                'verbose_name': 'аудитория',
                'verbose_name_plural': 'аудитории',
                'ordering': ['identifier'],
            },
        ),
        migrations.CreateModel(
            name='SubjectType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='название типа предмета')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
            ],
            options={
                'verbose_name': 'тип предмета',
                'verbose_name_plural': 'типы предметов',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название учебного плана')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
                ('is_active', models.BooleanField(default=True, verbose_name='активен')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='curricula', to='edu_core.academicyear', verbose_name='учебный год')),
            ],
            options={
                'verbose_name': 'учебный план',
                'verbose_name_plural': 'учебные планы',
                'ordering': ['academic_year', 'student_group', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CurriculumEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planned_hours', models.PositiveIntegerField(verbose_name='запланировано часов в периоде')),
                ('curriculum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='edu_core.curriculum', verbose_name='учебный план')),
                ('teacher', models.ForeignKey(blank=True, limit_choices_to={'role': 'TEACHER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='curriculum_entries_taught', to=settings.AUTH_USER_MODEL, verbose_name='преподаватель')),
            ],
            options={
                'verbose_name': 'запись учебного плана',
                'verbose_name_plural': 'записи учебного плана',
                'ordering': ['study_period', 'subject'],
            },
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Домашнее задание', max_length=255, verbose_name='заголовок/тема ДЗ')),
                ('description', models.TextField(verbose_name='описание задания')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='срок сдачи')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='выдано')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_homeworks', to=settings.AUTH_USER_MODEL, verbose_name='автор задания (преподаватель)')),
            ],
            options={
                'verbose_name': 'домашнее задание',
                'verbose_name_plural': 'домашние задания',
                'ordering': ['-due_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HomeworkAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=edu_core.models.homework_attachment_upload_path, verbose_name='файл')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='описание файла')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='edu_core.homework', verbose_name='домашнее задание')),
            ],
            options={
                'verbose_name': 'прикрепленный файл к ДЗ',
                'verbose_name_plural': 'прикрепленные файлы к ДЗ',
            },
        ),
        migrations.CreateModel(
            name='HomeworkSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='время сдачи')),
                ('content', models.TextField(blank=True, verbose_name='ответ/комментарий студента')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='edu_core.homework', verbose_name='домашнее задание')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='homework_submissions', to=settings.AUTH_USER_MODEL, verbose_name='студент')),
            ],
            options={
                'verbose_name': 'сдача ДЗ',
                'verbose_name_plural': 'сдачи ДЗ',
                'ordering': ['homework', '-submitted_at'],
                'unique_together': {('homework', 'student')},
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_type', models.CharField(choices=[('LECTURE', 'Лекция'), ('PRACTICE', 'Практическое занятие'), ('LAB', 'Лабораторная работа'), ('SEMINAR', 'Семинар'), ('CONSULTATION', 'Консультация'), ('EXAM', 'Экзамен/Зачет'), ('EVENT', 'Мероприятие/Событие'), ('OTHER', 'Другое')], default='LECTURE', max_length=20, verbose_name='тип занятия')),
                ('start_time', models.DateTimeField(verbose_name='время начала')),
                ('end_time', models.DateTimeField(verbose_name='время окончания')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lessons_in_core', to='edu_core.classroom', verbose_name='аудитория')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_core_lessons', to=settings.AUTH_USER_MODEL)),
                ('curriculum_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_lessons', to='edu_core.curriculumentry', verbose_name='связанная запись учебного плана')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'TEACHER'}, on_delete=django.db.models.deletion.CASCADE, related_name='lessons_taught_in_core', to=settings.AUTH_USER_MODEL, verbose_name='преподаватель')),
            ],
            options={
                'verbose_name': 'занятие',
                'verbose_name_plural': 'занятия',
                'ordering': ['start_time', 'student_group'],
            },
        ),
        migrations.CreateModel(
            name='LessonJournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_covered', models.CharField(blank=True, max_length=500, verbose_name='пройденная тема на занятии')),
                ('teacher_notes', models.TextField(blank=True, verbose_name='заметки преподавателя о занятии')),
                ('date_filled', models.DateTimeField(auto_now=True, verbose_name='дата заполнения журнала')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entry', to='edu_core.lesson', verbose_name='занятие')),
            ],
            options={
                'verbose_name': 'запись в журнале занятия',
                'verbose_name_plural': 'записи в журнале занятий',
            },
        ),
        migrations.AddField(
            model_name='homework',
            name='journal_entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='homework_assignments', to='edu_core.lessonjournalentry', verbose_name='запись в журнале'),
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название группы')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_groups', to='edu_core.academicyear', verbose_name='учебный год')),
                ('curator', models.ForeignKey(blank=True, limit_choices_to={'role': 'TEACHER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='curated_groups', to=settings.AUTH_USER_MODEL, verbose_name='куратор')),
                ('group_monitor', models.ForeignKey(blank=True, limit_choices_to={'role': 'STUDENT'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitored_group', to=settings.AUTH_USER_MODEL, verbose_name='староста группы')),
                ('students', models.ManyToManyField(blank=True, limit_choices_to={'role': 'STUDENT'}, related_name='student_group_memberships', to=settings.AUTH_USER_MODEL, verbose_name='студенты в группе')),
            ],
            options={
                'verbose_name': 'учебная группа',
                'verbose_name_plural': 'учебные группы',
                'ordering': ['academic_year', 'name'],
                'unique_together': {('name', 'academic_year')},
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='student_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='edu_core.studentgroup', verbose_name='учебная группа'),
        ),
        migrations.AddField(
            model_name='curriculum',
            name='student_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curricula', to='edu_core.studentgroup', verbose_name='учебная группа'),
        ),
        migrations.CreateModel(
            name='StudyPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Например, 1-я Четверть, Осенний семестр', max_length=100, verbose_name='название периода')),
                ('start_date', models.DateField(verbose_name='дата начала')),
                ('end_date', models.DateField(verbose_name='дата окончания')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_periods', to='edu_core.academicyear', verbose_name='учебный год')),
            ],
            options={
                'verbose_name': 'учебный период',
                'verbose_name_plural': 'учебные периоды',
                'ordering': ['academic_year', 'start_date'],
                'unique_together': {('academic_year', 'name')},
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='study_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lessons', to='edu_core.studyperiod', verbose_name='учебный период'),
        ),
        migrations.AddField(
            model_name='curriculumentry',
            name='study_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_entries', to='edu_core.studyperiod', verbose_name='учебный период'),
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='название предмета')),
                ('code', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='код предмета')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
                ('lead_teachers', models.ManyToManyField(blank=True, limit_choices_to={'role': 'TEACHER'}, related_name='lead_subjects', to=settings.AUTH_USER_MODEL, verbose_name='основные преподаватели предмета')),
                ('subject_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subjects', to='edu_core.subjecttype', verbose_name='тип предмета')),
            ],
            options={
                'verbose_name': 'предмет',
                'verbose_name_plural': 'предметы',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='edu_core.subject', verbose_name='предмет'),
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_value', models.CharField(max_length=10, verbose_name='значение оценки')),
                ('numeric_value', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='числовой эквивалент')),
                ('grade_type', models.CharField(choices=[('LESSON_WORK', 'Работа на занятии'), ('HOMEWORK_GRADE', 'Оценка за ДЗ'), ('TEST', 'Контрольная/Тест'), ('PROJECT', 'Проект'), ('QUIZ', 'Опрос/Летучка'), ('EXAM', 'Экзамен/Зачет'), ('PERIOD_AVG', 'Средняя за период (расчетная)'), ('PERIOD_FINAL', 'Итог за период (выставленная)'), ('YEAR_AVG', 'Средняя за год (расчетная)'), ('YEAR_FINAL', 'Итог за год (выставленная)')], max_length=20, verbose_name='тип оценки')),
                ('date_given', models.DateField(default=django.utils.timezone.now, verbose_name='дата выставления')),
                ('comment', models.TextField(blank=True, verbose_name='комментарий к оценке')),
                ('weight', models.PositiveSmallIntegerField(default=1, verbose_name='вес оценки')),
                ('graded_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'TEACHER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grades_given_by_teacher', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='grades_received', to=settings.AUTH_USER_MODEL, verbose_name='студент')),
                ('homework_submission', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grade_for_submission', to='edu_core.homeworksubmission', verbose_name='сдача ДЗ (если применимо)')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grades_for_lesson_instance', to='edu_core.lesson', verbose_name='занятие (если применимо)')),
                ('study_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades_in_period', to='edu_core.studyperiod', verbose_name='учебный период')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades_for_subject', to='edu_core.subject', verbose_name='предмет')),
            ],
            options={
                'verbose_name': 'оценка',
                'verbose_name_plural': 'оценки',
                'ordering': ['-date_given', 'student__last_name', 'subject'],
            },
        ),
        migrations.AddField(
            model_name='curriculumentry',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_entries', to='edu_core.subject', verbose_name='предмет'),
        ),
        migrations.CreateModel(
            name='SubjectMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='название материала')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
                ('file', models.FileField(upload_to=edu_core.models.subject_material_upload_path, verbose_name='файл материала')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('student_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subject_materials', to='edu_core.studentgroup', verbose_name='учебная группа (если применимо)')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='edu_core.subject', verbose_name='предмет')),
                ('uploaded_by', models.ForeignKey(limit_choices_to=models.Q(('role', 'TEACHER'), ('role', 'ADMIN'), _connector='OR'), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_materials', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'учебный материал',
                'verbose_name_plural': 'учебные материалы (библиотека)',
                'ordering': ['subject', 'student_group', '-uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='homework',
            name='related_materials',
            field=models.ManyToManyField(blank=True, related_name='homeworks_using_material', to='edu_core.subjectmaterial', verbose_name='связанные материалы'),
        ),
        migrations.CreateModel(
            name='SubmissionAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=edu_core.models.submission_attachment_upload_path, verbose_name='файл')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='edu_core.homeworksubmission', verbose_name='сдача ДЗ')),
            ],
            options={
                'verbose_name': 'файл сдачи ДЗ',
                'verbose_name_plural': 'файлы сдачи ДЗ',
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('P', 'Присутствовал (П)'), ('V', 'Отсутствовал по ув. причине (УП)'), ('N', 'Отсутствовал по неув. причине (Н)'), ('L', 'Опоздал (О)'), ('R', 'Дистанционно (Д)')], default='P', max_length=10, verbose_name='статус посещаемости')),
                ('comment', models.CharField(blank=True, max_length=255, verbose_name='комментарий')),
                ('marked_at', models.DateTimeField(auto_now_add=True, verbose_name='когда отмечено')),
                ('marked_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'TEACHER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='marked_attendances', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to=settings.AUTH_USER_MODEL, verbose_name='студент')),
                ('journal_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='edu_core.lessonjournalentry', verbose_name='запись в журнале')),
            ],
            options={
                'verbose_name': 'запись о посещаемости',
                'verbose_name_plural': 'записи о посещаемости',
                'ordering': ['journal_entry__lesson__start_time', 'student__last_name'],
                'unique_together': {('journal_entry', 'student')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='curriculum',
            unique_together={('name', 'academic_year', 'student_group')},
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['study_period', 'start_time'], name='edu_core_le_study_p_555dc0_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['teacher', 'start_time'], name='edu_core_le_teacher_43b7f7_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['student_group', 'start_time'], name='edu_core_le_student_0e1b7b_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['classroom', 'start_time'], name='edu_core_le_classro_a0b0ad_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['student', 'subject', 'study_period', 'date_given'], name='edu_core_gr_student_e71b88_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['lesson', 'student'], name='edu_core_gr_lesson__cd18c2_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['homework_submission'], name='edu_core_gr_homewor_ae2637_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='curriculumentry',
            unique_together={('curriculum', 'subject', 'teacher', 'study_period')},
        ),
    ]
